"use strict";(self.webpackChunk_rashedmakkouk_dev_toolbox=self.webpackChunk_rashedmakkouk_dev_toolbox||[]).push([[8987],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(s,".").concat(m)]||u[m]||p[m]||l;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4263:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={title:"Docker",sidebar_label:"Docker"},s=void 0,c={unversionedId:"devops/docker",id:"devops/docker",title:"Docker",description:"Commands",source:"@site/content/devops/docker.md",sourceDirName:"devops",slug:"/devops/docker",permalink:"/dev-toolbox/devops/docker",draft:!1,editUrl:"https://github.com/rashedmakkouk/dev-toolbox/edit/main/content/devops/docker.md",tags:[],version:"current",lastUpdatedBy:"Rashed Makkouk",lastUpdatedAt:1653907858,formattedLastUpdatedAt:"5/30/2022",frontMatter:{title:"Docker",sidebar_label:"Docker"},sidebar:"sidebar",previous:{title:"Yarn",permalink:"/dev-toolbox/devops/yarn"},next:{title:"Git",permalink:"/dev-toolbox/devops/git"}},d={},p=[{value:"Commands",id:"commands",level:2},{value:"Create a <code>user-defined</code> network",id:"create-a-user-defined-network",level:3},{value:"Start container &amp; force rebuild",id:"start-container--force-rebuild",level:3},{value:"Manage service state",id:"manage-service-state",level:3},{value:"Get container details",id:"get-container-details",level:3},{value:"Images",id:"images",level:2},{value:"Image prune",id:"image-prune",level:3},{value:"Containers",id:"containers",level:2},{value:"Shell access to container",id:"shell-access-to-container",level:3},{value:"Copy file between host &amp; container",id:"copy-file-between-host--container",level:3},{value:"Containers - MySQL",id:"containers---mysql",level:2},{value:"Connect to database instance",id:"connect-to-database-instance",level:3},{value:"Create new database user",id:"create-new-database-user",level:3},{value:"Export database dump file",id:"export-database-dump-file",level:3},{value:"Restore database dump file",id:"restore-database-dump-file",level:3},{value:"Enable <code>ONLY_FULL_GROUP_BY</code>",id:"enable-only_full_group_by",level:3},{value:"docker-compose.yml",id:"docker-composeyml",level:2},{value:"extends",id:"extends",level:3},{value:"Define top-level variables",id:"define-top-level-variables",level:3},{value:"Daemon WSL 2",id:"daemon-wsl-2",level:2},{value:"Limit resources used by Docker daemon using WSL 2",id:"limit-resources-used-by-docker-daemon-using-wsl-2",level:3}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"commands"},"Commands"),(0,l.kt)("h3",{id:"create-a-user-defined-network"},"Create a ",(0,l.kt)("inlineCode",{parentName:"h3"},"user-defined")," network"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker network create --driver bridge <network-name>\n")),(0,l.kt)("p",null,"To remove a network:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker network rm <network-name>\n")),(0,l.kt)("h3",{id:"start-container--force-rebuild"},"Start container & force rebuild"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose up --build <service>\n")),(0,l.kt)("h3",{id:"manage-service-state"},"Manage service state"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker start <service>\ndocker stop <service>\n\ndocker rm <service>\ndocker rm -f <service>\n")),(0,l.kt)("h3",{id:"get-container-details"},"Get container details"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker inspect -f\n")),(0,l.kt)("h2",{id:"images"},"Images"),(0,l.kt)("h3",{id:"image-prune"},"Image prune"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker image prune --filter="label=deprecated"\ndocker image prune --filter="label!=down=deprecated"\n')),(0,l.kt)("h2",{id:"containers"},"Containers"),(0,l.kt)("h3",{id:"shell-access-to-container"},"Shell access to container"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Debian")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec -it <container> /bin/bash\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Alpine")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec -it --user root <container> sh\n")),(0,l.kt)("h3",{id:"copy-file-between-host--container"},"Copy file between host & container"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker cp <container>:/path/to/file.ext .\ndocker cp ./file.ext <container>:/path/to/file.ext\n")),(0,l.kt)("h2",{id:"containers---mysql"},"Containers - MySQL"),(0,l.kt)("h3",{id:"connect-to-database-instance"},"Connect to database instance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"mysql -u root -p\n")),(0,l.kt)("h3",{id:"create-new-database-user"},"Create new database user"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-mysql"},"CREATE USER 'username'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\nGRANT ALL ON *.* TO 'username'@'%';\nFLUSH PRIVILIGES;\n")),(0,l.kt)("h3",{id:"export-database-dump-file"},"Export database dump file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec CONTAINER /usr/bin/mysqldump -u root --password=root DATABASE > backup.sql\n")),(0,l.kt)("h3",{id:"restore-database-dump-file"},"Restore database dump file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec -i CONTAINER /usr/bin/mysql -u root --password=root DATABASE < backup.sql\n")),(0,l.kt)("h3",{id:"enable-only_full_group_by"},"Enable ",(0,l.kt)("inlineCode",{parentName:"h3"},"ONLY_FULL_GROUP_BY")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"\\sql\n\\connect root@localhost\n\nSET sql_mode=(SELECT CONCAT(@@sql_mode,',ONLY_FULL_GROUP_BY',''));\n")),(0,l.kt)("h2",{id:"docker-composeyml"},"docker-compose.yml"),(0,l.kt)("h3",{id:"extends"},"extends"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"services")),(0,l.kt)("p",null,"Service properties can be overriden in the location that it was extended in."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"env_file")),(0,l.kt)("p",null,"Respective ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file is loaded from the context in which ",(0,l.kt)("inlineCode",{parentName:"p"},"docker-compose")," command is run. If a service is extended, properties defined in its own ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file, must also be defined in the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file where it is extended."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"networks")),(0,l.kt)("p",null,"Any defined networks is an extended service must also live where it was extended."),(0,l.kt)("h3",{id:"define-top-level-variables"},"Define top-level variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"dev.database-env:\n KEY: value\n\nservices:\n service-name:\n  environment:\n   <<: *database-env\n")),(0,l.kt)("h2",{id:"daemon-wsl-2"},"Daemon WSL 2"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/wsl/release-notes#build-18945"},"WSL Features"))),(0,l.kt)("h3",{id:"limit-resources-used-by-docker-daemon-using-wsl-2"},"Limit resources used by Docker daemon using WSL 2"),(0,l.kt)("p",null,"Create ",(0,l.kt)("inlineCode",{parentName:"p"},".wslconfig")," config file:"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"%USERPROFILE%/.wslconfig")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-conf"},"[wsl2]\nmemory=1GB\nswap=1GB\nprocessors=1\n")),(0,l.kt)("p",null,"Restart WSL service:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-powershell"},"Restart-Service LxssManager\n")))}m.isMDXComponent=!0}}]);