"use strict";(self.webpackChunk_rashedmakkouk_dev_toolbox=self.webpackChunk_rashedmakkouk_dev_toolbox||[]).push([[7972],{3905:function(e,t,o){o.d(t,{Zo:function(){return m},kt:function(){return g}});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var p=r.createContext({}),c=function(e){var t=r.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},m=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(o),g=n,d=u["".concat(p,".").concat(g)]||u[g]||s[g]||a;return o?r.createElement(d,i(i({ref:t},m),{},{components:o})):r.createElement(d,i({ref:t},m))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},4414:function(e,t,o){o.r(t),o.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=o(7462),n=o(3366),a=(o(7294),o(3905)),i=["components"],l={title:"Merge Git Repository into Monorepo",sidebar_label:"Merge Git Repository into Monorepo"},p=void 0,c={unversionedId:"how-to/git/merge-git-repository-into-monorepo",id:"how-to/git/merge-git-repository-into-monorepo",title:"Merge Git Repository into Monorepo",description:"From a repository",source:"@site/content/how-to/git/merge-git-repository-into-monorepo.md",sourceDirName:"how-to/git",slug:"/how-to/git/merge-git-repository-into-monorepo",permalink:"/dev-toolbox/how-to/git/merge-git-repository-into-monorepo",draft:!1,editUrl:"https://github.com/rashedmakkouk/dev-toolbox/edit/main/content/how-to/git/merge-git-repository-into-monorepo.md",tags:[],version:"current",lastUpdatedBy:"Rashed Makkouk",lastUpdatedAt:1653910839,formattedLastUpdatedAt:"5/30/2022",frontMatter:{title:"Merge Git Repository into Monorepo",sidebar_label:"Merge Git Repository into Monorepo"},sidebar:"sidebar",previous:{title:"Git",permalink:"/dev-toolbox/how-to/git/"},next:{title:"Setup Git Commit Linting",permalink:"/dev-toolbox/how-to/git/setup-git-commit-linting"}},m={},s=[{value:"From a repository",id:"from-a-repository",level:2},{value:"From a monorepo",id:"from-a-monorepo",level:2}],u={toc:s};function g(e){var t=e.components,o=(0,n.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"from-a-repository"},"From a repository"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Clone repository to a new directory")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git clone <repo-url> <package>\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Filter list of commits")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'export TARGET_DIR="packages/<package>"\n\ngit filter-branch --prune-empty --tree-filter \'\n  mkdir -p "$TARGET_DIR"\n  git ls-tree --name-only $GIT_COMMIT | xargs -I files mv files "$TARGET_DIR"\n\'\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The --prune-empty - removes commits which are empty due to the rewrite.")),(0,a.kt)("h2",{id:"from-a-monorepo"},"From a monorepo"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add remote in monorepo to package")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git remote add <package> /path/to/<package>\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Fetch commits from package")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git fetch <package> --no-tags\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"--no-tags - do not fetch tags to avoid polluting monorepo tags")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Merge")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git merge <package>/master --allow-unrelated-histories\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"--allow-unrelated-histories - override Git restriction to merge branch that\\\ndoesn't have a common ancestor.")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Remove remote")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git remote remove <package>\n")))}g.isMDXComponent=!0}}]);