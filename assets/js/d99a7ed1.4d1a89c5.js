"use strict";(self.webpackChunk_rashedmakkouk_dev_toolbox=self.webpackChunk_rashedmakkouk_dev_toolbox||[]).push([[6408],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return g}});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=l.createContext({}),c=function(e){var t=l.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=c(e.components);return l.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(a),g=n,u=p["".concat(s,".").concat(g)]||p[g]||d[g]||i;return a?l.createElement(u,r(r({ref:t},m),{},{components:a})):l.createElement(u,r({ref:t},m))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,r[1]=o;for(var c=2;c<i;c++)r[c]=a[c];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8421:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var l=a(7462),n=a(3366),i=(a(7294),a(3905)),r=["components"],o={title:"Git",sidebar_label:"Git"},s=void 0,c={unversionedId:"devops/git",id:"devops/git",title:"Git",description:"Changelog",source:"@site/content/devops/git.md",sourceDirName:"devops",slug:"/devops/git",permalink:"/dev-toolbox/devops/git",draft:!1,editUrl:"https://github.com/rashedmakkouk/dev-toolbox/edit/main/content/devops/git.md",tags:[],version:"current",lastUpdatedBy:"Rashed Makkouk",lastUpdatedAt:1654710696,formattedLastUpdatedAt:"6/8/2022",frontMatter:{title:"Git",sidebar_label:"Git"},sidebar:"sidebar",previous:{title:"Docker",permalink:"/dev-toolbox/devops/docker"},next:{title:"Linux",permalink:"/dev-toolbox/devops/linux"}},m={},d=[{value:"Changelog",id:"changelog",level:2},{value:"Output commits metadata",id:"output-commits-metadata",level:3},{value:"Config",id:"config",level:2},{value:"Show current configuration",id:"show-current-configuration",level:3},{value:"Add user details",id:"add-user-details",level:3},{value:"Add commit template",id:"add-commit-template",level:3},{value:"Add remote URL",id:"add-remote-url",level:3},{value:"Set remote upstream",id:"set-remote-upstream",level:3},{value:"Repository",id:"repository",level:2},{value:"Create a new repository",id:"create-a-new-repository",level:3},{value:"Push an existing folder",id:"push-an-existing-folder",level:3},{value:"Push an existing Git repository",id:"push-an-existing-git-repository",level:3},{value:"Staging",id:"staging",level:2},{value:"Unstage (but retain) all changes since last commit",id:"unstage-but-retain-all-changes-since-last-commit",level:3},{value:"Unstage (&amp; discard) all changes since last commit",id:"unstage--discard-all-changes-since-last-commit",level:3},{value:"Revert all changes to specific commit in history",id:"revert-all-changes-to-specific-commit-in-history",level:3},{value:"Unstage file(s) or directory to last commit",id:"unstage-files-or-directory-to-last-commit",level:3},{value:"Discard changes to unstaged file(s)",id:"discard-changes-to-unstaged-files",level:3},{value:"Remove file or directory from tree",id:"remove-file-or-directory-from-tree",level:3},{value:"All: Stages all modified, new &amp; deleted files",id:"all-stages-all-modified-new--deleted-files",level:3},{value:"update: Stages modified &amp; deleted files, excluding <code>new</code> files",id:"update-stages-modified--deleted-files-excluding-new-files",level:3},{value:"Stage a specific file or folder",id:"stage-a-specific-file-or-folder",level:3},{value:"Show staged changes",id:"show-staged-changes",level:3},{value:"Undo activities",id:"undo-activities",level:3},{value:"Commit",id:"commit",level:2},{value:"Structure",id:"structure",level:3},{value:"Types",id:"types",level:4},{value:"Scopes",id:"scopes",level:4},{value:"Revert file changes to a specific commit in history",id:"revert-file-changes-to-a-specific-commit-in-history",level:3},{value:"Update message only of last commit",id:"update-message-only-of-last-commit",level:3},{value:"Update files only of last commit",id:"update-files-only-of-last-commit",level:3},{value:"Update files &amp; message of last commit",id:"update-files--message-of-last-commit",level:3},{value:"View list of commits",id:"view-list-of-commits",level:3},{value:"Compare file from two different commits",id:"compare-file-from-two-different-commits",level:3},{value:"Message",id:"message",level:3},{value:"Branches",id:"branches",level:2},{value:"Create branch",id:"create-branch",level:3},{value:"Switch to branch",id:"switch-to-branch",level:3},{value:"Rename branch",id:"rename-branch",level:3},{value:"Merge branch",id:"merge-branch",level:3},{value:"Rebase branch",id:"rebase-branch",level:3},{value:"Compare branches",id:"compare-branches",level:3},{value:"Get branch info",id:"get-branch-info",level:3},{value:"Publish branch",id:"publish-branch",level:3},{value:"Track branch",id:"track-branch",level:3},{value:"Delete branch",id:"delete-branch",level:3},{value:"Tags",id:"tags",level:2},{value:"Create tag from branch",id:"create-tag-from-branch",level:3},{value:"Create annotated tag from branch",id:"create-annotated-tag-from-branch",level:3},{value:"Create tag from commit",id:"create-tag-from-commit",level:3},{value:"Push tags to remote repository",id:"push-tags-to-remote-repository",level:3},{value:"Delete tag",id:"delete-tag",level:3},{value:"Stash",id:"stash",level:2},{value:"Save changes to stach",id:"save-changes-to-stach",level:3},{value:"View stashed changes",id:"view-stashed-changes",level:3},{value:"View summary of changes",id:"view-summary-of-changes",level:3},{value:"Retrieve stashed changes",id:"retrieve-stashed-changes",level:3},{value:"Delete stashed changes",id:"delete-stashed-changes",level:3},{value:"Misc",id:"misc",level:2},{value:"List files to update from <code>.gitignore</code>",id:"list-files-to-update-from-gitignore",level:3},{value:"Remove updated files in <code>.gitignore</code>",id:"remove-updated-files-in-gitignore",level:3},{value:"List modified files",id:"list-modified-files",level:3},{value:"Datetime keywords",id:"datetime-keywords",level:4},{value:"Clear working tree cache",id:"clear-working-tree-cache",level:3},{value:"Undo clear working tree cache",id:"undo-clear-working-tree-cache",level:3}],p={toc:d};function g(e){var t=e.components,a=(0,n.Z)(e,r);return(0,i.kt)("wrapper",(0,l.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"changelog"},"Changelog"),(0,i.kt)("h3",{id:"output-commits-metadata"},"Output commits metadata"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'git log --oneline --decorate\n\ngit log --pretty="- %s" > CHANGELOG.md\n\ngit log --stat\n')),(0,i.kt)("h2",{id:"config"},"Config"),(0,i.kt)("h3",{id:"show-current-configuration"},"Show current configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git config --list\ngit remote show origin\ngit config --get remote.origin.url\n")),(0,i.kt)("h3",{id:"add-user-details"},"Add user details"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git config --global user.name <First Last name>\ngit config --global user.email <email@address.xyz>\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Drop --global to limit config to specific repository")),(0,i.kt)("h3",{id:"add-commit-template"},"Add commit template"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git config --global commit.template <path/to/.gitmessage.txt>\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Drop --global to limit config to specific repository")),(0,i.kt)("h3",{id:"add-remote-url"},"Add remote URL"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git remote add origin <url>\n")),(0,i.kt)("h3",{id:"set-remote-upstream"},"Set remote upstream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git push --set-upstream origin master\ngit push -u origin master\n")),(0,i.kt)("h2",{id:"repository"},"Repository"),(0,i.kt)("h3",{id:"create-a-new-repository"},"Create a new repository"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'git clone git@xxx.xxx.xxx.xxx:path/to/repo.git\n\ncd docs\ntouch README.md\ngit add README.md\ngit commit -m "add README"\ngit push -u origin master\n')),(0,i.kt)("h3",{id:"push-an-existing-folder"},"Push an existing folder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'cd existing_folder\ngit init\ngit clone git@xxx.xxx.xxx.xxx:path/to/repo.git\ngit add .\ngit commit -m "Initial commit"\ngit push -u origin master\n')),(0,i.kt)("h3",{id:"push-an-existing-git-repository"},"Push an existing Git repository"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd existing_repo\ngit remote rename origin old-origin\ngit clone git@xxx.xxx.xxx.xxx:path/to/repo.git\ngit push -u origin --all\ngit push -u origin --tags\n")),(0,i.kt)("h2",{id:"staging"},"Staging"),(0,i.kt)("h3",{id:"unstage-but-retain-all-changes-since-last-commit"},"Unstage (but retain) all changes since last commit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git reset\ngit reset --soft HEAD~1\n")),(0,i.kt)("h3",{id:"unstage--discard-all-changes-since-last-commit"},"Unstage (& discard) all changes since last commit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git reset --hard\n")),(0,i.kt)("h3",{id:"revert-all-changes-to-specific-commit-in-history"},"Revert all changes to specific commit in history"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git reset --hard <commit_sha>\n")),(0,i.kt)("h3",{id:"unstage-files-or-directory-to-last-commit"},"Unstage file(s) or directory to last commit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git reset HEAD -- <filename>\ngit reset HEAD -- .\n")),(0,i.kt)("h3",{id:"discard-changes-to-unstaged-files"},"Discard changes to unstaged file(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git checkout -- <filename>\ngit checkout .\n")),(0,i.kt)("h3",{id:"remove-file-or-directory-from-tree"},"Remove file or directory from tree"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Add to ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," to bypass in future commits.  ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git rm <filename>\ngit rm -r <dirname>\n")),(0,i.kt)("h3",{id:"all-stages-all-modified-new--deleted-files"},"All: Stages all modified, new & deleted files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git add .\n")),(0,i.kt)("h3",{id:"update-stages-modified--deleted-files-excluding-new-files"},"update: Stages modified & deleted files, excluding ",(0,i.kt)("inlineCode",{parentName:"h3"},"new")," files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git add -u\n")),(0,i.kt)("h3",{id:"stage-a-specific-file-or-folder"},"Stage a specific file or folder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git add <filename>\ngit add <dirname>\n")),(0,i.kt)("h3",{id:"show-staged-changes"},"Show staged changes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git status\n")),(0,i.kt)("h3",{id:"undo-activities"},"Undo activities"),(0,i.kt)("p",null,"List all executed commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git reflog\n")),(0,i.kt)("p",null,"Undo changes to specified activity:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git reset HEAD@{#}\n")),(0,i.kt)("h2",{id:"commit"},"Commit"),(0,i.kt)("h3",{id:"structure"},"Structure"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"See ",(0,i.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org"},"conventional-commits")," specification.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ascii"},"<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n")),(0,i.kt)("p",null,'Multiple scopes are supported (delimiter options: "/", "',"\\",'", ",").'),(0,i.kt)("h4",{id:"types"},"Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BREAKING CHANGE"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build"),": Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chore"),": Changes to the build process or auxiliary tools and libraries"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ci"),": Changes to our CI configuration files and scripts (example scopes: Circle, BrowserStack, SauceLabs)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deprecate"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"docs"),": Documentation only changes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"feat"),": A new feature"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fix"),": A bug fix"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"perf"),": A code change that improves performance"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refactor"),": A code change that neither fixes a bug nor adds a feature"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"revert"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"style"),": Changes that do not affect the meaning of the code (e.g. white space, formatting)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test"),": Adding missing tests or correcting existing tests")),(0,i.kt)("p",null,"Breaking change commit options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Suffix an existing type with ",(0,i.kt)("inlineCode",{parentName:"li"},"!")," to indicate a breaking change")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ascii"},"refactor!: Breaking change message\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Suffix an existing type with ",(0,i.kt)("inlineCode",{parentName:"li"},"!")," and use a footer token to describe the change")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ascii"},"fix!: New feature message\n\nBREAKING CHANGE: Breaking change message\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use type BREAKING CHANGE followed by colon, space and the message")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ascii"},"BREAKING CHANGE: Breaking change message\n")),(0,i.kt)("h4",{id:"scopes"},"Scopes"),(0,i.kt)("p",null,"Covers named packages, exceptions include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"changelog")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"migrations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*-infra"))),(0,i.kt)("h3",{id:"revert-file-changes-to-a-specific-commit-in-history"},"Revert file changes to a specific commit in history"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git checkout <commit_sha> <filename>\n")),(0,i.kt)("h3",{id:"update-message-only-of-last-commit"},"Update message only of last commit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'git commit --amend -m "Updated commit message"\n')),(0,i.kt)("h3",{id:"update-files-only-of-last-commit"},"Update files only of last commit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git add <missed-out-file.ext>\ngit commit --amend --no-edit\n")),(0,i.kt)("h3",{id:"update-files--message-of-last-commit"},"Update files & message of last commit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'git add <missed-out-file.ext>\ngit commit --amend -m "Updated commit files & message"\n')),(0,i.kt)("h3",{id:"view-list-of-commits"},"View list of commits"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git log --oneline\ngit log\ngit log --stat\n")),(0,i.kt)("h3",{id:"compare-file-from-two-different-commits"},"Compare file from two different commits"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git diff <commit#1>:<file-path> <commit#2>:<file-path>\n")),(0,i.kt)("h3",{id:"message"},"Message"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Use open double quotes to write multiline message.",(0,i.kt)("br",{parentName:"p"}),"\n","Use -m for the header & second -m for the details (separate paragraphs)")),(0,i.kt)("h2",{id:"branches"},"Branches"),(0,i.kt)("h3",{id:"create-branch"},"Create branch"),(0,i.kt)("p",null,"Switch to the branch you want to create a new branch in."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"From scratch:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git branch <branch_name>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"From tag/commit/branch:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git branch <branch_name> <[tag|commit|branch]_name>\n")),(0,i.kt)("h3",{id:"switch-to-branch"},"Switch to branch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git switch <branch_name>\n")),(0,i.kt)("h3",{id:"rename-branch"},"Rename branch"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If branch is already published, delete remote branch, create and push a new branch.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git branch -M <new_name>\n")),(0,i.kt)("h3",{id:"merge-branch"},"Merge branch"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Creates a new commit.")),(0,i.kt)("p",null,"Merge all branch commits into active branch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git merge --squash <branch_name>\n")),(0,i.kt)("h3",{id:"rebase-branch"},"Rebase branch"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Merges commits to active branch.")),(0,i.kt)("p",null,"Switch to branch to bring changes into."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git rebase <branch_name>\n")),(0,i.kt)("h3",{id:"compare-branches"},"Compare branches"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git log origin/main..<branch_name>\n")),(0,i.kt)("h3",{id:"get-branch-info"},"Get branch info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git branch -a\ngit branch -v\n")),(0,i.kt)("h3",{id:"publish-branch"},"Publish branch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git push -u origin <branch_name>\n")),(0,i.kt)("h3",{id:"track-branch"},"Track branch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git checkout --track origin/<branch_name>\n")),(0,i.kt)("h3",{id:"delete-branch"},"Delete branch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Delete branch from working directory:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git branch -d <branch_name>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Delete branch from remote repository:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git push origin --delete <branch_name>\n")),(0,i.kt)("h2",{id:"tags"},"Tags"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Semantic versioning guideline: ",(0,i.kt)("inlineCode",{parentName:"p"},"v<major>.<minor>.<patch>"),"; see\n",(0,i.kt)("a",{parentName:"p",href:"https://semver.org"},"semver")," form more details.")),(0,i.kt)("h3",{id:"create-tag-from-branch"},"Create tag from branch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git tag <tag_name>\n")),(0,i.kt)("h3",{id:"create-annotated-tag-from-branch"},"Create annotated tag from branch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'git tag -a <tag_name> -m "Message text"\n')),(0,i.kt)("h3",{id:"create-tag-from-commit"},"Create tag from commit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git tag <tag_name> <commit_sha>\n")),(0,i.kt)("h3",{id:"push-tags-to-remote-repository"},"Push tags to remote repository"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git push --tags\n")),(0,i.kt)("h3",{id:"delete-tag"},"Delete tag"),(0,i.kt)("p",null,"From working directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git tag -d <tag_name>\n")),(0,i.kt)("p",null,"From remote repository:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git push origin -d <tag_name>\n")),(0,i.kt)("h2",{id:"stash"},"Stash"),(0,i.kt)("h3",{id:"save-changes-to-stach"},"Save changes to stach"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'git stash save "<message>"\n')),(0,i.kt)("h3",{id:"view-stashed-changes"},"View stashed changes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git stash list\n")),(0,i.kt)("h3",{id:"view-summary-of-changes"},"View summary of changes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git stash show <stash>\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Include ",(0,i.kt)("inlineCode",{parentName:"p"},"-p")," (for patch) option to view changes in diff-style patch layout.")),(0,i.kt)("h3",{id:"retrieve-stashed-changes"},"Retrieve stashed changes"),(0,i.kt)("p",null,"Apply changes and leave a copy in the stash:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git stash apply <stash>\n")),(0,i.kt)("p",null,"Apply changes and remove files from the stash:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git stash pop <stach>\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"merge")," procedures to resolve conflicts.")),(0,i.kt)("h3",{id:"delete-stashed-changes"},"Delete stashed changes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git stash drop <stash>\ngit stash clear\n")),(0,i.kt)("h2",{id:"misc"},"Misc"),(0,i.kt)("h3",{id:"list-files-to-update-from-gitignore"},"List files to update from ",(0,i.kt)("inlineCode",{parentName:"h3"},".gitignore")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git ls-files -i -z --exclude-from=.gitignore\n")),(0,i.kt)("h3",{id:"remove-updated-files-in-gitignore"},"Remove updated files in ",(0,i.kt)("inlineCode",{parentName:"h3"},".gitignore")),(0,i.kt)("p",null,"Method #1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git ls-files -i --exclude-from=.gitignore | xargs -0 git rm -r -n --cached\n")),(0,i.kt)("p",null,"Method #2:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git rm -r -n --cached `git ls-files -i --exclude-from=.gitignore`\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"-i: ignored",(0,i.kt)("br",{parentName:"p"}),"\n","-r: recursive",(0,i.kt)("br",{parentName:"p"}),"\n","-n: dry run; list affected files")),(0,i.kt)("p",null,"Commit changes and push to origin to remove/update from remote repository."),(0,i.kt)("h3",{id:"list-modified-files"},"List modified files"),(0,i.kt)("p",null,"By duration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git diff $(git log -1 --before=@{last.day} --format=%H) --stat | uniq\n")),(0,i.kt)("p",null,"Since specified time:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git diff $(git log -1 --before=@{4.hours.ago} --format=%H) --stat | uniq\n")),(0,i.kt)("h4",{id:"datetime-keywords"},"Datetime keywords"),(0,i.kt)("p",null,"day",(0,i.kt)("br",{parentName:"p"}),"\n","hour",(0,i.kt)("br",{parentName:"p"}),"\n","week",(0,i.kt)("br",{parentName:"p"}),"\n","month  "),(0,i.kt)("h3",{id:"clear-working-tree-cache"},"Clear working tree cache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git rm -r --cached <directory>\n")),(0,i.kt)("h3",{id:"undo-clear-working-tree-cache"},"Undo clear working tree cache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git reset HEAD .\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If not committed.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git reset HEAD~1\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If commited.")))}g.isMDXComponent=!0}}]);